generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credentials {
  user_id       String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  password_hash String? @db.VarChar(75)
  username      String? @db.VarChar(50)
  user_type     String? @db.VarChar(20)
}

model Images {
  image_id  String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  memory_id String? @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  image_uri String? @db.VarChar(50)
  memory    memory? @relation(fields: [memory_id], references: [memory_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Images.memory_id")
}

model Order {
  order_id     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String?   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  order_time   DateTime? @db.Timestamp(6)
  order_type   String?   @db.VarChar(20)
  mode         String?   @db.VarChar(20)
  ticket_count Int?
  User         User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Order.user_id")
  Ticket       Ticket[]
}

model Planet {
  planet_id         String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description       String?             @db.VarChar(50)
  Spacestation      Spacestation?
  local_destination local_destination[]
}

model Spaceship {
  ship_id           String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  seat_count        Int?
  name              String?             @db.VarChar(20)
  ship_type         String?             @db.VarChar(20)
  Available_Booking Available_Booking[]
}

model Spacestation {
  space_station_id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  planet_id        String? @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Planet           Planet  @relation(fields: [space_station_id], references: [planet_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Spacestation.space_station_id")
}

model Ticket {
  ticket_id  String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  booking_id String?            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  seat_num   Int?
  order_id   String?            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  Booking    Available_Booking? @relation(fields: [booking_id], references: [booking_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Ticket.booking_id")
  Order      Order?             @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Ticket.order_id")
}

model User {
  user_id       String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?         @db.VarChar(50)
  uid_number    String?         @db.VarChar(50)
  points        Int?
  Order         Order[]
  crypto_wallet crypto_wallet[]
  memory        memory[]
  stored_cards  stored_cards?
}

model crypto_wallet {
  wallet_id String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id   String? @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  User      User?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_crypto_wallet.user_id")
}

model local_destination {
  local_dest_id                                                      String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                                               String?             @db.VarChar(50)
  Location                                                           String?             @db.VarChar(75)
  planet_id                                                          String?             @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  local_description                                                  String?             @db.VarChar(50)
  Available_Booking_Available_Booking_end_idTolocal_destination      Available_Booking[] @relation("Available_Booking_end_idTolocal_destination")
  Available_Booking_Available_Booking_starting_idTolocal_destination Available_Booking[] @relation("Available_Booking_starting_idTolocal_destination")
  Booking_spaceship_Booking_spaceship_end_idTolocal_destination      Booking_spaceship[] @relation("Booking_spaceship_end_idTolocal_destination")
  Booking_spaceship_Booking_spaceship_starting_idTolocal_destination Booking_spaceship[] @relation("Booking_spaceship_starting_idTolocal_destination")
  Planet                                                             Planet?             @relation(fields: [planet_id], references: [planet_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_local_destination.planet_id")
}

model memory {
  memory_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id   String?  @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  likes     Int?
  Images    Images[]
  User      User?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_memory.user_id")
}

model stored_cards {
  card_number  String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String? @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expiry_month Int?    @db.SmallInt
  expiry_year  Int?
  cvn          Int?
  User         User    @relation(fields: [card_number], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_stored_cards.card_number")
}

model Available_Booking {
  booking_id                                                         String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ship_id                                                            String?            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  starting_id                                                        String?            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  end_id                                                             String?            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  starting_time                                                      DateTime?          @db.Timestamp(6)
  local_destination_Available_Booking_end_idTolocal_destination      local_destination? @relation("Available_Booking_end_idTolocal_destination", fields: [end_id], references: [local_dest_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Available Booking.end_id")
  Spaceship                                                          Spaceship?         @relation(fields: [ship_id], references: [ship_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Available Booking.ship_id")
  local_destination_Available_Booking_starting_idTolocal_destination local_destination? @relation("Available_Booking_starting_idTolocal_destination", fields: [starting_id], references: [local_dest_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Available Booking.starting_id")
  Ticket                                                             Ticket[]

  @@map("Available Booking")
}

model Booking_spaceship {
  ship_type                                                          String            @db.VarChar(20)
  starting_id                                                        String            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  end_id                                                             String            @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  price                                                              Float?
  local_destination_Booking_spaceship_end_idTolocal_destination      local_destination @relation("Booking_spaceship_end_idTolocal_destination", fields: [end_id], references: [local_dest_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Booking-spaceship.end_id")
  local_destination_Booking_spaceship_starting_idTolocal_destination local_destination @relation("Booking_spaceship_starting_idTolocal_destination", fields: [starting_id], references: [local_dest_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Booking-spaceship.starting_id")

  @@id([ship_type, starting_id, end_id])
  @@map("Booking-spaceship")
}
